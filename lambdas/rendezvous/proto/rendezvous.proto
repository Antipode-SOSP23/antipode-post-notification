syntax = "proto3";

package rendezvous;

service ClientService {
  /* Streaming */
  rpc Subscribe(SubscribeMessage) returns (stream SubscribeResponse);
  /* Unary RPCs */
  rpc RegisterRequest(RegisterRequestMessage) returns (RegisterRequestResponse);
  rpc RegisterBranch(RegisterBranchMessage) returns (RegisterBranchResponse);
  rpc RegisterBranchesDatastores(RegisterBranchesDatastoresMessage) returns (RegisterBranchesDatastoresResponse);
  rpc CloseBranch(CloseBranchMessage) returns (Empty);
  rpc WaitRequest(WaitRequestMessage) returns (WaitRequestResponse);
  rpc CheckStatus(CheckStatusMessage) returns (CheckStatusResponse);
  rpc FetchDependencies(FetchDependenciesMessage) returns (FetchDependenciesResponse);
}

/* Helpers */
enum RequestStatus {
  CLOSED = 0;
  OPENED = 1;
  UNKNOWN = 2;
}
message Empty {

}

/* Metadata for server replication */
message RequestContext {
  string prev_service = 1;
  map<string, int32> versions = 2;
}

/* Publish-Subscribe */
message SubscribeMessage {
  string service = 1;
  string region = 2;
}
message SubscribeResponse {
  string bid = 1;
  string tag = 2;
}

/* Register Request */
message RegisterRequestMessage {
  string rid = 1;
}
message RegisterRequestResponse {
  string rid = 1;
  RequestContext context = 2;
}

/* Registers Branches */
message RegisterBranchMessage {
  string rid = 1;
  string service = 2;
  string tag = 3;
  repeated string regions = 4;
  bool monitor = 5;
  RequestContext context = 6;
}
message RegisterBranchResponse {
  string rid = 1;
  string bid = 2;
  RequestContext context = 3;
}

/* Register Branches - SERVERLESS VERSION */
message DatastoreBranching {
  string datastore = 1;
  string tag = 2;
  repeated string regions = 3;
}
message RegisterBranchesDatastoresMessage {
  string rid = 1;
  repeated string datastores = 2;
  repeated string regions = 3;
  repeated string tags = 4;
  repeated DatastoreBranching branches = 5;
  RequestContext context = 6;
}
message RegisterBranchesDatastoresResponse {
  string rid = 1;
  repeated string bids = 2;
  RequestContext context = 3;
}

/* Close Branch */
message CloseBranchMessage {
  string bid = 1;
  string region = 2;
  bool force = 3;
  RequestContext context = 4;
}

/* Wait */
message WaitRequestMessage {
  string rid = 1;
  string service = 2;
  repeated string services = 3;
  string region = 4;
  string tag = 5;
  int32 timeout = 6;
  //bool async = 6;
  RequestContext context = 7;
}
message WaitRequestResponse {
  bool prevented_inconsistency = 1;
  bool timed_out = 2;
}

/* Check Status */
message CheckStatusMessage {
  string rid = 1;
  string service = 2;
  string region = 3;
  bool detailed = 4;
  RequestContext context = 5;
}

message CheckStatusResponse {
  RequestStatus status = 1;
  map<string, RequestStatus> tagged = 2;
  map<string, RequestStatus> regions = 3;
}

/* Check Dependencies */
message FetchDependenciesMessage {
  string rid = 1;
  string service = 2;
  RequestContext context = 4;
}

message FetchDependenciesResponse {
  repeated string dependencies = 1;
}