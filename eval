#!/usr/bin/env python3

from plumbum import FG, BG
from plumbum import local
import time

REQUESTS = 1000
#--------------
WRITER_REGIONS = [
  'eu',
]
READER_REGIONS = [
  'us',
  'sg',
]
#--------------
POST_STORAGES = [
  'mysql',
  'dynamo',
  's3',
  'cache',
]
NOTIFICATION_STORAGES = [
  'sns',
  'dynamo',
  'mq',
]

#--------------
COMBINATIONS = {
  # ('eu', 'us', 'mysql', 'sns')    : [ 0 ],    #✅
  # ('eu', 'us', 'dynamo','sns')    : [ 0 ],    #✅
  # ('eu', 'us', 'cache', 'sns')    : [ 0 ],    #✅
  # ('eu', 'us', 's3',    'sns')    : [ 0 ],    #✅
  # ('eu', 'us', 'mysql', 'mq')     : [ 0 ],    #✅
  # ('eu', 'us', 'dynamo','mq')     : [ 0 ],    #✅
  # ('eu', 'us', 'cache', 'mq')     : [ 0 ],    #✅
  # ('eu', 'us', 's3',    'mq')     : [ 0 ],    #✅
  # ('eu', 'us', 'mysql', 'dynamo') : [ 0 ],    #✅
  # ('eu', 'us', 'dynamo','dynamo') : [ 0 ],    #✅
  # ('eu', 'us', 'cache', 'dynamo') : [ 0 ],    #✅
  # ('eu', 'us', 's3',    'dynamo') : [ 0 ],    #✅
  #--------------
  # ('eu', 'sg', 'mysql', 'sns')    : [ 0 ],    #✅
  # ('eu', 'sg', 'dynamo','sns')    : [ 0 ],    #✅
  # ('eu', 'sg', 'cache', 'sns')    : [ 0 ],    #✅
  # ('eu', 'sg', 's3',    'sns')    : [ 0 ],    #✅
  # ('eu', 'sg', 'mysql', 'mq')     : [ 0 ],    #✅
  # ('eu', 'sg', 'dynamo','mq')     : [ 0 ],    #✅
  # ('eu', 'sg', 'cache', 'mq')     : [ 0 ],    #✅
  # ('eu', 'sg', 's3',    'mq')     : [ 0 ],    #✅
  # ('eu', 'sg', 'mysql', 'dynamo') : [ 0 ],    #✅
  # ('eu', 'sg', 'dynamo','dynamo') : [ 0 ],    #✅
  # ('eu', 'sg', 'cache', 'dynamo') : [ 0 ],    #✅
  # ('eu', 'sg', 's3',    'dynamo') : [ 0 ],    #✅
  #--------------
  ('eu', 'us', 's3',    'sns') : [ 60000, 22500, 25000, 35000 ],
}

antipode_lambda = local["./antipode_lambda"]
for (writer_region, reader_region, post_storage, notification_storage),delays in COMBINATIONS.items():
  print('[INFO] New deployment starting:')
  print(f"\t > writer region: {writer_region} // reader region: {reader_region}")
  print(f"\t > app: {post_storage.upper()}-{notification_storage.upper()}\n")

  for delay in delays:
    antipode_lambda['build',
        '--post-storage', post_storage,
        '--notification-storage', notification_storage,
        '--writer', writer_region,
        '--reader', reader_region,
        '--delay', delay,
      ] & FG

    # preemptive clean just to make sure everything is indeed cleaned
    antipode_lambda['clean'] & FG
    # main culprit of this sleep is mostly DYNAMO
    time.sleep(60)

    antipode_lambda['run',
        '--requests', REQUESTS,
      ] & FG

    antipode_lambda['gather',
        '-t', f"{writer_region}-{reader_region}__{REQUESTS}__delay-{delay}ms",
      ] & FG

  antipode_lambda['clean', '--strong'] & FG
  print('\n[INFO] Done!')