#!/usr/bin/env python3

from plumbum import FG, local
from pathlib import Path
import time
import os
import sys
from pprint import pprint as pp

ROOT_PATH = Path(os.path.abspath(os.path.dirname(sys.argv[0])))
GATHER_PATH = ROOT_PATH / 'gather'
#--------------
NUM_ROUNDS = 1
REQUESTS = 1000
COMBINATIONS = {
  # (antipode?, writer_region , reader_region, post_storage, notification_storage) : [ delay_0, ... delay_n]
  # e.g. ('eu', 'us', 'mysql', 'sns') : [ 1100, 1200, 1300, 1400, 1500 ]

  # for baseline inconsistencies
  (False, 'eu', 'us', 'cache', 'sns') : [ 0 ],
  (False, 'eu', 'us', 'dynamo', 'sns') : [ 0 ],
  (False, 'eu', 'us', 'mysql', 'sns') : [ 0 ],
  (False, 'eu', 'us', 's3', 'sns') : [ 0 ],

  # for inconsistencies percentages
  (False, 'eu', 'us', 'cache', 'mq') : [ 0 ],
  (False, 'eu', 'us', 'dynamo', 'mq') : [ 0 ],
  (False, 'eu', 'us', 'mysql', 'mq') : [ 0 ],
  (False, 'eu', 'us', 's3', 'mq') : [ 0 ],
  (False, 'eu', 'us', 'cache', 'dynamo') : [ 0 ],
  (False, 'eu', 'us', 'dynamo', 'dynamo') : [ 0 ],
  (False, 'eu', 'us', 'mysql', 'dynamo') : [ 0 ],
  (False, 'eu', 'us', 's3', 'dynamo') : [ 0 ],

  # for delay
  # (False, 'eu', 'us', 'cache', 'sns') : [ 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500 ],
  # (False, 'eu', 'us', 'dynamo', 'sns') : [ 100, 200, 300, 400, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000 ],
  # (False, 'eu', 'us', 'mysql', 'sns') : [ 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500 ],
  # (False, 'eu', 'us', 's3', 'sns') : [ 500, 1000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000 ],

  # for antipode vs baseline plots
  (True, 'eu', 'us', 'cache', 'sns') : [ 0 ],
  (True, 'eu', 'us', 'dynamo', 'sns') : [ 0 ],
  (True, 'eu', 'us', 'mysql', 'sns') : [ 0 ],
  (True, 'eu', 'us', 's3', 'sns') : [ 0 ]
}

antipode_lambda = local["./antipode_lambda"]

# Initial clean
antipode_lambda['clean', '--strong'] & FG
gathered_dirs = []
for (antipode, writer_region, reader_region, post_storage, notification_storage),delays in COMBINATIONS.items():
  for delay in delays:
    for nround in range(NUM_ROUNDS):
      print(f"[INFO] [ROUND #{nround}] Deployment starting:")
      print(f"\t > writer region: {writer_region} // reader region: {reader_region}")
      print(f"\t > app: {post_storage.upper()}-{notification_storage.upper()}")
      print(f"\t > antipode: {antipode}")
      print(f"\t > delay: {delay}")
      print("\n")

      build_args = ['build',
        '--post-storage', post_storage,
        '--notification-storage', notification_storage,
        '--writer', writer_region,
        '--reader', reader_region,
        '--delay', delay,
      ]
      if antipode:
        build_args.append('-ant')
      antipode_lambda[build_args] & FG

      # preemptive clean just to make sure datastores are indeed cleaned
      antipode_lambda['clean'] & FG
      # main culprit of this sleep is mostly DYNAMO
      time.sleep(60)

      antipode_lambda['run', '--requests', REQUESTS ] & FG
      antipode_lambda['gather'] & FG

      # clean experiment before next round
      antipode_lambda['clean'] & FG

      # find out the gather dir
      gather_path = max((GATHER_PATH).glob('*/**'), key=os.path.getmtime)
      gathered_dirs.append(gather_path)
  #
  antipode_lambda['clean', '--strong'] & FG

print("[INFO] Gathered results:")
print('\n'.join([str(p).split(str(GATHER_PATH) + '/')[1] for p in gathered_dirs]))